<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team3webnovel.mappers.NovelMapper">

    <!-- 소설 목록 조회 (전체 소설) -->
    <select id="getNovelList" resultType="com.team3webnovel.vo.NovelVo">
        SELECT 
            novel_id AS novelId,
            title,
            created_at AS creationDate
        FROM novel_detail
        ORDER BY created_at DESC
    </select>

    <!-- 특정 사용자 ID로 소설 목록 조회 -->
    <select id="getNovelListByUserId" parameterType="int" resultType="com.team3webnovel.vo.NovelVo">
        SELECT 
		    n.novel_id AS novelId,
		    n.title,
		    n.genre,
		    n.status,
		    n.creation_id,
		    n.intro,
		    n.created_at AS createdAt,
		    i.image_url AS imageUrl,
		    n.user_id as userId
		FROM 
		    novel n
		LEFT JOIN image_generation_data i ON n.creation_id = i.creation_id
		WHERE 
		    n.user_id = #{userId}  
		ORDER BY 
		    n.created_at DESC
    </select>
    
    <select id="getNovelByNovelId" parameterType="int" resultType="com.team3webnovel.vo.NovelVo">
		SELECT 
		    n.NOVEL_ID AS novelId,
		    n.GENRE,
		    n.STATUS,
		    n.USER_ID AS userId,
		    n.TITLE,
		    n.CREATION_ID AS creationId,
		    n.INTRO,
		    n.CREATED_AT AS createdAt,
		    igd.IMAGE_URL AS imageUrl,
		    u.USERNAME as userName,
		    nd.episode_no as episodeNo
		FROM 
		    novel n
		LEFT JOIN 
		    IMAGE_GENERATION_DATA igd ON n.CREATION_ID = igd.CREATION_ID
		LEFT JOIN
		    USERS u ON u.USER_ID = n.USER_ID
		LEFT JOIN 
		    NOVEL_DETAIL nd ON n.NOVEL_ID = nd.NOVEL_ID
		WHERE 
		    n.NOVEL_ID = #{novelId}
		    AND (nd.episode_no IS NULL OR nd.episode_no = (
		        SELECT MAX(nd2.episode_no)
		        FROM NOVEL_DETAIL nd2
		        WHERE nd2.NOVEL_ID = n.NOVEL_ID
		    ))
    </select>
    
    

    <!-- 새 소설 추가 -->
    <insert id="insertNovel" parameterType="com.team3webnovel.vo.NovelVo">
        INSERT INTO novel (
            novel_id, title, intro, user_id, genre, created_at, creation_id
        ) VALUES (
            novel_seq.NEXTVAL, #{title}, #{intro}, #{userId}, #{genre}, #{createdAt}, #{creationId}
        )
    </insert>
    
    <!-- 성민 -->
    <insert id="insertNovelDetail" parameterType="com.team3webnovel.vo.NovelVo">
    	INSERT INTO novel_detail (
    		novel_id, title, episode_no, contents, image_id, bgm_id, visibility
    	) VALUES (
    		#{novelId}, #{title}, #{episodeNo}, #{contents}, #{imageId}, #{bgmId}, 'private'
    	)
    </insert>
    
    <select id="getNovelDetailByNovelId" parameterType="int" resultType="com.team3webnovel.vo.NovelVo">
		SELECT 
		    ND.NOVEL_ID as novelId,
		    ND.EPISODE_NO as episodeNo,
		    ND.CONTENTS as contents,
		    ND.CREATED_AT as createdAt,
		    ND.IMAGE_ID as imageId,
		    ND.TITLE as title,
		    ND.BGM_ID as bgmId,
		    ND.VISIBILITY,
		    igd.image_url as imageUrl
		FROM 
		    NOVEL_DETAIL ND
		LEFT JOIN 
		    IMAGE_GENERATION_DATA IGD 
		ON 
		    ND.IMAGE_ID = IGD.creation_ID
		WHERE 
		    ND.NOVEL_ID = #{novelId}
		ORDER BY 
        	ND.EPISODE_NO DESC
    </select>
    
    <update id="updateStatus" parameterType="com.team3webnovel.vo.NovelVo">
	   	UPDATE NOVEL
	    SET STATUS = #{status}
	    WHERE NOVEL_ID = #{novelId}
    </update>
    
	<select id="getMainNovelList" resultType="com.team3webnovel.vo.NovelVo">
		SELECT 
		    n.NOVEL_ID AS novelId,
		    n.GENRE,
		    n.STATUS,
		    n.USER_ID AS userId,
		    n.TITLE,
		    n.CREATION_ID AS creationId,
		    n.INTRO,
		    n.CREATED_AT AS createdAt,
		    igd.IMAGE_URL AS imageUrl,  -- IMAGE_URL 컬럼 추가
		    COUNT(nl.NOVEL_ID) AS likeCount  -- 좋아요 수를 카운트
		FROM 
		    novel n
		LEFT JOIN 
		    IMAGE_GENERATION_DATA igd ON n.CREATION_ID = igd.CREATION_ID
		LEFT JOIN 
		    novel_likes nl ON n.NOVEL_ID = nl.NOVEL_ID  -- novel_likes 테이블 조인
		WHERE 
		    n.STATUS IS NOT NULL
		GROUP BY 
		    n.NOVEL_ID, n.GENRE, n.STATUS, n.USER_ID, n.TITLE, n.CREATION_ID, n.INTRO, n.CREATED_AT, igd.IMAGE_URL
		ORDER BY 
		    likeCount DESC,  -- 좋아요 수 내림차순
		    n.TITLE ASC
	</select>
    
	<select id="getNovelDetail" parameterType="com.team3webnovel.vo.NovelVo" resultType="com.team3webnovel.vo.NovelVo">
		SELECT 
		    nd.NOVEL_ID as novelId,          -- 소설 ID
		    nd.EPISODE_NO as episodeNo,       -- 에피소드 번호
		    nd.CONTENTS,                      -- 내용
		    nd.CREATED_AT as createdAt,       -- 생성 일자
		    nd.IMAGE_ID as imageId,           -- 이미지 ID
		    igd.image_url as imageUrl,        -- 이미지 URL
		    nd.TITLE,                         -- 제목
		    nd.BGM_ID as bgmId,               -- BGM ID
		    md.audio_url as bgmUrl,           -- BGM URL (MUSIC_DATA 테이블에서 가져옴)
		    n.USER_ID as userId               -- 유저 ID
		FROM 
		    NOVEL_DETAIL nd
		LEFT JOIN NOVEL n
		    ON nd.novel_id = n.novel_id       -- NOVEL 테이블과 JOIN (소설 ID 매칭)
		LEFT JOIN IMAGE_GENERATION_DATA igd
		    ON nd.image_id = igd.creation_id  -- IMAGE_GENERATION_DATA 테이블과 JOIN (이미지 ID 매칭)
		LEFT JOIN MUSIC_DATA md
		    ON nd.bgm_id = md.creation_id     -- MUSIC_DATA 테이블과 JOIN (BGM ID 매칭)
		WHERE  
		    nd.NOVEL_ID = #{novelId}          -- 소설 ID 조건
		    AND nd.EPISODE_NO = #{episodeNo}  -- 에피소드 번호 조건
		ORDER BY 
        	ND.EPISODE_NO DESC

	</select>
	
	<update id="updateNovelDetail" parameterType="com.team3webnovel.vo.NovelVo">
	    UPDATE NOVEL_DETAIL
	    SET
	        CONTENTS = #{contents},
	        IMAGE_ID = #{imageId},
	        TITLE = #{title},
	        BGM_ID = #{bgmId},
	        CREATED_AT = CURRENT_TIMESTAMP
	    WHERE
	        NOVEL_ID = #{novelId}
	    AND
	        EPISODE_NO = #{episodeNo}
	</update>
	
	<update id="updateEpisodeVisibility" parameterType="com.team3webnovel.vo.NovelVo">
	    UPDATE novel_detail
	    SET visibility = #{visibility}
	    WHERE novel_id = #{novelId} AND episode_no = #{episodeNo}
	</update><!-- 성민 -->
    

    <!-- 소설 수정 -->
	<update id="updateNovel" parameterType="com.team3webnovel.vo.NovelVo">
	    UPDATE novel
	    SET title = #{title},
	        intro = #{intro},
	        genre = #{genre},
	        creation_id = #{imageId}
	    WHERE novel_id = #{novelId}
	</update>

    <!-- 소설 삭제 -->
    <delete id="deleteNovel" parameterType="int">
        DELETE FROM novel WHERE novel_id = #{novelId}
    </delete>

	<select id="searchNovels" parameterType="string" resultType="com.team3webnovel.vo.NovelVo">
	    SELECT 
	        n.NOVEL_ID AS novelId,
	        n.GENRE,
	        n.STATUS,
	        n.USER_ID AS userId,
	        n.TITLE,
	        n.CREATION_ID AS creationId,
	        n.INTRO,
	        n.CREATED_AT AS createdAt,
	        igd.IMAGE_URL AS imageUrl  -- IMAGE_URL 컬럼 추가
	    FROM 
	        novel n
	    LEFT JOIN 
	        IMAGE_GENERATION_DATA igd ON n.CREATION_ID = igd.CREATION_ID
	    WHERE 
	        n.STATUS IS NOT NULL
	    AND 
	        REPLACE(n.title, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'  -- 공백 제거 후 검색
	    ORDER BY 
	        n.created_at DESC
	</select>
	
	<delete id="deleteEpisode" parameterType="map">
	    DELETE FROM novel_detail
	    WHERE novel_id = #{novelId}
	    AND episode_no = #{episodeNo}
	</delete>


	<select id="check" parameterType="Map" resultType="int">
	    SELECT COUNT(*) FROM novel_likes WHERE novel_id = #{novelId} AND user_id = #{userId}
	</select>


	<insert id="pushLike" parameterType="Map">
		insert into novel_likes (novel_id, user_id) values (#{novelId}, #{userId})
	</insert>
	
	<delete id="unlike" parameterType="map">
		delete from novel_likes where novel_id = #{novelId} and user_id = #{userId}
	</delete>

</mapper>
